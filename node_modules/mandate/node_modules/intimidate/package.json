{
  "name": "intimidate",
  "version": "0.1.2",
  "description": "Upload files to s3 with exponential backoff",
  "main": "index.js",
  "scripts": {
    "test": "node_modules/.bin/mocha test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jergason/intimidate.git"
  },
  "keywords": [
    "s3",
    "uploads",
    "retries",
    "backoff"
  ],
  "author": {
    "name": "Jamison Dance",
    "email": "jergason@gmail.com",
    "url": "http://jamisondance.com"
  },
  "license": "BSD",
  "dependencies": {
    "mime": "~1.2.9",
    "knox": "~0.8.3",
    "waitress": "~0.1.5"
  },
  "devDependencies": {
    "mocha": "~1.9.0"
  },
  "readme": "#intimidate\n\nintimidate is a node module to upload files to S3 with support for\nautomatic retry and exponential backoff.\n\nIt uses the excellent [knox](https://github.com/LearnBoost/knox) library to\nhandle the heavy lifting.\n\n> When you need those uploads to back off, use *intimidate*â„¢. - The Readme\n\n## Installation\n\n```bash\nnpm install intimidate\n```\n\n## Examples\n\nUpload a local file:\n\n```JavaScript\nvar Intimidate = require('intimidate')\n// Create a client\nvar client = new Intimidate({\n  key: 'some-aws-key',\n  secret: 'some-aws-secret',\n  bucket: 'lobsters',\n  maxRetries: 5\n})\n\nclient.upload('path/to/a/file.xml', 'destination/path/on/s3.xml', function(err, res) {\n  if (err) {\n    console.log('oh noes, all uploads failed! last error was', err)\n  }\n  else {\n    console.log('yahoo, upload succeeded!')\n  }\n})\n```\n\n## API\n\n### `Intimidate(opts)`\n\nThe constructor takes any opts that can be passed to\n[knox's](https://github.com/LearnBoost/knox) `createClient` function. Here are\nsome important ones.\n\n* `key` - S3 api key. Required.\n* `secret` - S3 api secret. Required.\n* `bucket` - S3 bucket to upload to. Required.\n* `region` - S3 region to upload to. Defaults to `'us-west-2'`\n* `maxRetries` - the number of times to retry before failing. Defaults to 3.\n* `backoffInterval` a multiplier used to calculate exponential backoff. Larger\n   numbers result in much larger backoff times after each failure. Defaults to 51.\n\nExample:\n\n```JavaScript\nvar Intimidate = require('intimidate')\nvar s3Uploader = new Intimidate({\n  key: 'love',\n  secret: 'a sneaky secret',\n  bucket: 'kicked',\n  maxRetries: 4,\n  backoffInterval: 20\n})\n```\n\n### `upload(sourcePath, destination, cb)`\n\n\n Upload a file at sourcePath with automatic retries and exponential backoff\n\nParams:\n\n* `sourcePath` location of the file to upload on the fs\n* `destination` path in s3 to upload file to\n* `cb` function(err, res) called when upload is done or has\n    failed too many times. `err` is the last error, and `res` is the reponse\n    object if the request succeeded\n\n\nExample:\n\n```JavaScript\nclient.upload('a_car.zip', 'uploaded_cars/car.zip', function(err, res) {\n  if (err) {\n    console.log('Dang, guess you can\\'t upload a car.', err)\n  }\n  else {\n    console.log('I uploaded a car.')\n  }\n})\n```\n\n### `uploadBuffer(buffer, headers, destination, cb)`\n\nUpload a buffer\n\nParams:\n\n* `buffer` buffer to upload\n* `headers` HTTP headers to set on request. `'Content-Length'` will default to\n   `buffer.length`, and `'Content-Type'` will default to\n   'application/octet-stream' if not provided.\n* `destination` path on S3 to put file\n* `cb` function(err, res) called when request completes or fails too many times\n\n\nExample:\n\n```JavaScript\nvar data = new Buffer('Shall I compare thee to a summer/'s day?')\nvar headers = {\n  'Content-Type': 'application/text',\n  'Content-Length': data.length\n}\n\nclient.uploadBuffer(data, headers, 'poem_idea.txt', function(err, res) {\n  if (err) {\n    console.log('error uplaoding my sweet poem idea', err)\n  }\n  else {\n    console.log('my poem idea is successfully archived to s3')\n  }\n})\n```\n\n### `uploadFiles(files, cb)`\n\nUpload an array of files. The callback will be called when they all upload\nsuccessfully, or when at least one of the uploads has failed.\n\nParams:\n\n* `files` Array of `{src: 'some_path.file', dest: 'some_uploaded_path.file'}`\n  file object to be uploaded.\n* `cb` `function(err, res)` that will be called when upload is complete or\n  one of the files has failed to upload.\n\nExample:\n\n\n```JavaScript\nvar files = [{src: 'hurp.txt', dest: 'durp.txt'}, {src: 'foo.txt', dest: 'foo.txt'}]\nclient.uploadFiles(files, function(err, res) {\n  if (err) {\n    console.error('error uploading one file', err)\n  }\n  else {\n    console.log('hooray, successfully uploaded all files')\n  }\n})\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jergason/intimidate/issues"
  },
  "homepage": "https://github.com/jergason/intimidate",
  "_id": "intimidate@0.1.2",
  "dist": {
    "shasum": "92c25309c35b7d92b551123a4ec846c8d1ac792a"
  },
  "_from": "intimidate@~0.1.2",
  "_resolved": "http://registry.npmjs.org/intimidate/-/intimidate-0.1.2.tgz"
}
